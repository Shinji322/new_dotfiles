# Basic Settings
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set period 1
set shell zsh
set hidden true
set drawbox true
set icons true
set ignorecase true
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

# Custom Functions
cmd open ${{
  case $(file --mime-type "$f" -bL) in
    # text/*|application/json) $EDITOR "$f";;
    *) xdg-open "$f" &!;;
  esac
}}

cmd paste-async ${{
  # mode="$(cat ~/.local/share/lf/files | head -1)"
  # # COLS=$((tput cols)/3)
  # case "$mode" in
  #   copy) 
  #     # tmux splitw -h -p $(($(tput cols)/3)) -- "cpg -g -rn \"$@\" ."
  #     tmux splitw -h -p 30 -- bash -c '~/.local/bin/tmux/lf-paste-async.sh'
  #     tmux select-pane -l # switch to last pane
  #     ;;
  #   move) 
  #     # tmux splitw -h -p $(($(tput cols)/3)) -- "mvg -g -n \"$@\" ."
  #     tmux splitw -h -p 30 -- bash -c 'for f in $(cat ~/.local/share/lf/files | tail +2); do mvg -g -i "$f" .; done'
  #     tmux select-pane -l # switch to last pane
  #     ;;
  # esac
  rm ~/.local/share/lf/files
  lf -remote "send clear"
}}

cmd mkdir ${{
	clear; tput bold; tput setaf 4;

  printf "Directory Name: "
  read ans
  mkdir -p $ans
}}

cmd mkfile ${{
	clear; tput bold; tput setaf 2;
  printf "File Name: "
  read ans
  touch $ans
}}

cmd mkbakup ${{
    cp -r "$f" "$f.bak"
}}

cmd chmod ${{
	clear; tput bold
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    # let's just make sure it's valid so we don't screw up the file
    if [ "$ans" = "+x" ]; then
      chmod +x $file
    fi
    if [ "$ans" = "-x" ]; then
      chmod -x $file
    fi
  done

  lf -remote 'send reload'
}}

cmd setwallpaper ${{ 
  feh --no-fehbg --bg-fill -r -z "$f"
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Archive bindings
cmd extract ${{
  case "$f" in
    *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
        tar -xjvf ./"$f" ;;
    *.lzma)      
        unlzma ./"$f"      ;;
    *.zip) 
        unzip "$f" ;;
    *.cbr|*.rar)       
        unrar x -ad ./"$f" ;;
    *.gz)        
        gunzip ./"$f"      ;;
    *.cbz|*.epub|*.zip)       
        unzip ./"$f"       ;;
    *.z)         
        uncompress ./"$f"  ;;
    *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
        7z x ./"$f"        ;;
    *.xz)        
        unxz ./"$f"        ;;
    *.exe)       
        cabextract ./"$f"  ;;
    *.cpio)      
        cpio -id < ./"$f"  ;;
    *.cba|*.ace)      
        unace x ./"$f"      ;;
    *.tar.gz) 
        tar -xzvf ./"$f" ;;
    *.tar) 
        tar -xvf ./"$f" ;;
    *) 
        echo "Unsupported format" ;;
  esac
}}

# Trash cli bindings
cmd trash ${{
  # fails on large files
	clear; tput bold; tput setaf 4; 
	set -f
  files=$(printf "$fx" | tr '\n' ';')
	printf "%s\n\t" "$fx"
	printf "delete?[y/N] "
	read ans
  if [ $ans = "y" ] 
  then
    # idk why we have to do all of this
    while [ "$files" ]; do 
      file="${files%%;*}" 
      trash-put -- "$(basename "$file")"

      # if last element
      if [ "$files" = "$file" ]; then
        files='' # exit while loop
      else
        files="${files#*;}"
      fi
    done
  fi
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd copy-file-contents &{{
    xclip -sel c < "$f"
}}

cmd copy-file-path &{{
    echo "$f" | xclip -sel c
}}

# cmd copy-file-name &{{
#     echo "${f##*/}" | xclip -sel c
# }}

cmd dragon-drag %{{
    dragon-drop "$f"
}}
cmd dragon-drag-all %{{
    dragon-drop --all "$f"
}}

cmd fzf-open ${{
    choice=$(fzf)
    [ -n "$choice" ] && cd "$(dirname $choice)"
}}

cmd bulkrename $vidir
cmd copy_filename $printf "%s" "$fx" | xclip -selection clipboard

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map t
map C

# File Openers
map ee $$EDITOR "$f"

# Archive Mappings
map ex extract "$f"
map B bulkrename

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Dragon Mapping
map dr dragon-drag
map da dragon-drag-all

# Copy filename
map cc copy_filename

# Basic Functions
map . set hidden!
map p paste
map x cut
map y copy
map mf mkfile
map md mkdir
map mb mkbakup
map ch chmod
map bg setwallpaper
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect
map fj fzf_jump

# Movement
map gtr  cd ~/.local/share/Trash/files
map gm   cd /run/media/mokou

map gv.  cd ~/video
map gva  cd ~/video/anime

map gi.  cd ~/images
map gis  cd ~/images/screenshots
map giw  cd ~/images/walls
map gia  cd ~/images/anime

map gD   cd ~/documents
map gd   cd ~/downloads

map gs   cd ~/software

map gc.  cd ~/.config
map gce  cd ~/.config/lvim # Supposed to mean gc Editor
map gcl  cd ~/.config/lf
map gcs  cd ~/.config/shell
map gcz  cd ~/.config/zsh
map gct  cd ~/.config/kitty
map gcx  cd ~/.config/x11
map gck  cd ~/.config/sxhkd
map gcw  cd ~/.config/i3

map gL  cd ~/literature

map gl. cd ~/.local
map gls cd ~/.local/src
map glS cd ~/.local/share
map glr cd ~/.local/repos
map glb cd ~/.local/bin
map gE  cd /etc
