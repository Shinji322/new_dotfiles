***REMOVED*** Basic Settings
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set period 1
set shell zsh
set hidden true
set drawbox true
set icons true
set ignorecase true
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'

***REMOVED*** Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        ***REMOVED*** text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" &!;;
    esac
}}

cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) 
            tmux splitw -h -p 20 -- "cpg -g -rn $@ ."
            dunstify "Started transferring file: " "$@"
            ***REMOVED*** cp -rn -- "$line" .
            ;;
        move) 
            ***REMOVED*** [[ "$line" == "move" ]] && continue
            tmux splitw -h -p 20 -- "mvg -g -n $@ ."
            dunstify "Started transferring file: " "$@"
            ***REMOVED*** mv -n -- "$line" .
            ;;
    esac

    dunstify "Succesful file transfer!" "$@" -i folder
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

cmd mkdir ${{
	clear; tput bold
  printf "Directory Name: "
  read ans
  mkdir -p $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  touch $ans
}}

cmd mkbakup ${{
    cp -r "$f" "$f.bak"
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd setwallpaper ${{ 
  feh --no-fehbg --bg-fill -r -z "$f"
}}

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

***REMOVED*** Archive bindings
cmd extract ${{
  case "$f" in
    *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
        tar -xjvf ./"$f" ;;
    *.lzma)      
        unlzma ./"$f"      ;;
    *.zip) 
        unzip "$f" ;;
    *.cbr|*.rar)       
        unrar x -ad ./"$f" ;;
    *.gz)        
        gunzip ./"$f"      ;;
    *.cbz|*.epub|*.zip)       
        unzip ./"$f"       ;;
    *.z)         
        uncompress ./"$f"  ;;
    *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
        7z x ./"$f"        ;;
    *.xz)        
        unxz ./"$f"        ;;
    *.exe)       
        cabextract ./"$f"  ;;
    *.cpio)      
        cpio -id < ./"$f"  ;;
    *.cba|*.ace)      
        unace x ./"$f"      ;;
    *.tar.gz) 
        tar -xzvf ./"$f" ;;
    *.tar) 
        tar -xvf ./"$f" ;;
    *) 
        echo "Unsupported format" ;;
  esac
}}

***REMOVED*** Trash cli bindings
cmd trash ${{
	clear; tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "delete?[y/N]"
	read ans
  if [ $ans = "y" ] 
  then
    for file in "$fx"
    do
      trash-put "$file"
    done
  fi
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd copy-file-contents &{{
    xclip -sel c < "$f"
}}

cmd copy-file-path &{{
    echo "$f" | xclip -sel c
}}

***REMOVED*** cmd copy-file-name &{{
***REMOVED***     echo "${f***REMOVED******REMOVED****/}" | xclip -sel c
***REMOVED*** }}

cmd dragon-drag %{{
    dragon-drop "$f"
}}
cmd dragon-drag-all %{{
    dragon-drop --all "$f"
}}

cmd fzf-open ${{
    choice=$(fzf)
    [ -n "$choice" ] && xdg-open $choice
}}

cmd fzf-dir-open ${{
    choice=$(fd . --type d | fzf)
    [ -n "$choice" ] && cd ./$choice
}}

cmd bulkrename $vidir
cmd copy_filename $printf "%s" "$fx" | xclip -selection clipboard

***REMOVED*** Bindings
***REMOVED*** Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map t

***REMOVED*** File Openers
map ee $$EDITOR "$f"

***REMOVED*** Archive Mappings
map ex extract "$f"
map br bulkrename

***REMOVED*** Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

***REMOVED*** Dragon Mapping
map dr dragon-drag
map da dragon-drag-all

map ss stripspace

***REMOVED*** Basic Functions
map . set hidden!
map DD delete
map p paste-async
map P paste 
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map mg mkgitkeep
map ma mknewassignement
map mb mkbakup
map ch chmod
map cc copy-file-contents
map cn copy-file-name
map cf copy-file-path
map bg setwallpaper
map r rename
map R $ vidir .
map H top
map L bottom
map R reload
map C clear
map U unselect
map ff fzf-open 
map fd fzf-dir-open
map fj fzf_jump

***REMOVED*** Movement
map gtr  cd ~/.local/share/Trash/files
map gm   cd /run/media/mokou

map gv.  cd ~/video
map gva  cd ~/video/anime

map gi.  cd ~/images
map gis  cd ~/images/screenshots
map giw  cd ~/images/walls
map gia  cd ~/images/anime

map gD   cd ~/documents
map gd   cd ~/downloads
map ge   cd ~/desktop

map gG   cd ~/games

map gS   cd ~/.scripts
map gs.  cd ~/software
map gsa  cd ~/software/app-images

map gp.  cd ~/code
map gpl  cd ~/code/learning
map gpp  cd ~/code/projects

map gc.  cd ~/.config
map gce  cd ~/.config/lvim ***REMOVED*** Supposed to mean gc Editor
map gcl  cd ~/.config/lf
map gcs  cd ~/.config/shell
map gcz  cd ~/.config/zsh
map gct  cd ~/.config/kitty
map gcx  cd ~/.config/x11
map gck  cd ~/.config/sxhkd
map gcw  cd ~/.config/i3

map gL  cd ~/literature

map gl. cd ~/.local
map gls cd ~/.local/src
map glS cd ~/.local/share
map glr cd ~/.local/repos
map glb cd ~/.local/bin
map gE  cd /etc
map gU. cd /usr
map gUs cd /usr/share

map gw  cd ~/vimwiki
