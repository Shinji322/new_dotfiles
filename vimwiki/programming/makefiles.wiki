= Assignment Operators =

{{{make
SRCS = main.c
SRCS := $(wildcard *.c) # evaluates the expression
SRCS != find . -name '*.c' # shell output
SRCS := $(shell find . -name '*.c') # also shell output
CC_FLAGS += -Wextra # Append to
CFLAGS ?= $(CC_FLAGS) # Conditional assignment (if null, assign)
FOO := $(BAR)   # the whitespace between the comment and expression is included in make
}}}


= Built in Functions = 

{{{make
$(SRCS:.c=.o) # replaces .c with .o
$(addprefix build/,$(OBJS)) # add a build directory
$(if ...) $(or ..) $(and ..) # conditional functions (almost never used)
$(foreach var,list,text)
$(value (VARIABLE)) # prints variable
$(shell ..) # shell commands
$(error ..) # will exit and print the string argument
$(warning ..) # !! but doesn't exit and says "warning"
$(info ..)  # !! but says "info"
}}}


= Rules =

{{{make
# target: prereq
    # rules
    
# $< = prereq
# $@ = target
%.o: %.c
    $(CC) -c $(CFLAGS) -o $@ $<
    
%.o: $.cpp 
    $(CXX) -c $(CXXFLAGS) -o $@ 
}}}


= Recipes =

{{{make
SRCS = main.c
OBJS := $(SRCS:.c=.o)

TARGET := foo

# .PHONY is used so make knows that it doesn't need to create a file called 'all'
.PHONY: all clean

all: $(TARGET)

$(TARGET): $(OBJS)
    # gcc -o foo main.c foo.c bar.c
    $(CC) -o $@ $^
    
clean: 
    rm -f $(OBJS)
}}}


= Automatic Variables =

{{{make
SRCS = main.c
OBJS := $(SRCS:.c=.o)
DIR  := build
OBJS := $(addprefix $(DIR), $(OBJS))

TARGET := foo

.PHONY: clean

$(DIR)/%.o: %.c
    $(CC) -c $(CFLAGS) -o $@ $<
    
$(TARGET): $(OBJS) | $(DIR) 
    $(CC) -o $@ $^
    
$(DIR): 
    mkdir -p $@
}}}
>"$@" refers to current target
>"$<" refers to the first pre-req
>"$^" refers to all pre-req
>"$?" refers to pre-reqs that have changed
>"$|" refers to Order-only pre-req
>>That means that it won't rebuild any parents in the build hiearchy
>>>Make, by default rebuilds the parents, whenever the children have been updated


= Template =

{{{make
SRCS := $(wildcard *.c)
OBJDIR = .build
OBJS := $(SRCS:%.c=$(OBJDIR)/%.o)

.PHONY clean

$(OBJDIR)/%.o: %.c
    @echo [CC] $@
    @$(CC) -c $(CFLAGS) -o $@ $<
    
$(TARGET): $(OBJS) 
    @echo [LD] $@
    @$(CC) $(LDFLAGS) -o $@ $^
    
$(OBJDIR):
    @mkdir -p $@
    
clean:
    @rm -rf $(OBJDIR) $(TARGET)

}}}
>The precedeing "@" indicates that make shouldn't print it to the screen
